<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>快速排序(Quick Sort)</title>
      <link href="/Blog/2022/06/11/kuai-su-pai-xu-quick-sort/"/>
      <url>/Blog/2022/06/11/kuai-su-pai-xu-quick-sort/</url>
      
        <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>快速排序是（Quick sort）是对冒泡排序的一种改进，是非常重要且应用比较广泛的一种高效率排序算法。</p><h1 id="二、算法思路"><a href="#二、算法思路" class="headerlink" title="二、算法思路"></a>二、算法思路</h1><p>快速排序是通过多次比较和交换来实现排序，在一趟排序中把将要排序的数据分成两个独立的部分，对这两部分进行排序使得其中一部分所有数据比另一部分都要小，然后继续递归排序这两部分，最终实现所有数据有序。</p><p>大致步骤如下：</p><p>首先设置一个分界值也就是基准值又是也称为监视哨，通过该分界值将数据分割成两部分。<br>将大于或等于分界值的数据集中到右边，小于分界值的数据集中到左边。一趟排序过后，左边部分中各个数据元素都小于分界值，而右边部分中各数据元素都大于或等于分界值，且右边部分个数据元素皆大于左边所有数据元素。<br>然后，左边和右边的数据可以看成两组不同的部分，重复上述1和2步骤<br>当左右两部分都有序时，整个数据就完成了排序。</p><h1 id="三、算法步骤图解"><a href="#三、算法步骤图解" class="headerlink" title="三、算法步骤图解"></a>三、算法步骤图解</h1><p>首先设置三个参数，first指向区间左端，last指向区间右端，key为当前的分界值。<br>从待排序的数据元素中选取一个通常为第一个作为基准值元素（key）key=num[0]，设置双指针first指向区间左端，last指向区间右端。<br><img src="/Blog/quicksort1.png"></p><h2 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h2><p>key 首先与 num[last] 进行比较，如果 num[last]&lt;key，则num[first]=num[last]将这个比key小的数放到左边去，如果num[last]&gt;=key则- -last，再拿num[last]与key进行比较，直到num[last]&lt;key交换元素为止。<br><img src="/Blog/quicksort2.png"></p><h2 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h2><p>num[last]&lt;key交换元素后，转向左边部分，用num[first]与key进行比较，如果num[first]&lt;key,则++first，然后继续进行比较，直至num[first]&gt;key,则将num[last]=num[first]。<br><img src="/Blog/quicksort3.png"><br><img src="/Blog/quicksort4.png"></p><h2 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h2><p>重复上述一二步骤<br><img src="/Blog/quicksort5.png"><br><img src="/Blog/quicksort6.png"><br><img src="/Blog/quicksort7.png"><br><img src="/Blog/quicksort8.png"></p><h2 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h2><p>第一趟排序结束，得到[2,11,15,20,9,5] 23 [56,45,35] 然后对左右子数列进行同样的操作。<br>2 [11,15,20,9,5] 23 [35,45] 56<br>2 [5,9] 11 [20,15] 23 35 45 56<br>2 5 9 11 15 20 23 35 45 56<br>完成从小到大的排序</p><h1 id="四、算法性能分析"><a href="#四、算法性能分析" class="headerlink" title="四、算法性能分析"></a>四、算法性能分析</h1><h2 id="最好情况"><a href="#最好情况" class="headerlink" title="最好情况"></a>最好情况</h2><p>每次数据元素都能平均的分成两个部分。得到一个完全二叉树。如果有n个数据元素，那么数的深度为<img src="/Blog/quicksort9.png"></p><h2 id="最坏情况"><a href="#最坏情况" class="headerlink" title="最坏情况"></a>最坏情况</h2><p>在最坏的情况下，这个数仅有右子树或左子树，比较次数为 （n-1）+（n-2) + (n-3) + … +1=n*(n-1)/2 ,因此时间复杂度为O(n^2),在待排序数据元素已经有序的情况下快速排序时间复杂度最高</p><p>空间复杂度为O(n）<br>快速排序是一种不稳定的排序算法，会改变数据元素的相对位置，也是内排序中平均效率最高的排序算法。</p><h1 id="五、代码实现"><a href="#五、代码实现" class="headerlink" title="五、代码实现"></a>五、代码实现</h1><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果小于等于1个数据元素·直接返回结束快排函数 r为数组元素总个数</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&gt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> first<span class="token operator">=</span>l<span class="token punctuation">,</span>last<span class="token operator">=</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>key<span class="token operator">=</span>num<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>first<span class="token operator">&lt;</span>last<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span>first<span class="token operator">&lt;</span>last<span class="token operator">&amp;&amp;</span>num<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token operator">&gt;=</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">--</span>last<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//如果值小于 key分界值 交换 </span>num<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>first<span class="token operator">&lt;</span>last<span class="token operator">&amp;&amp;</span>num<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token operator">&lt;</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">++</span>first<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//如果值大于key分界值 交换 </span>num<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>num<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token operator">=</span>key<span class="token punctuation">;</span><span class="token comment">//递归左右部分进行快排 </span><span class="token function">quick_sort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>l<span class="token punctuation">,</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">quick_sort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>first<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//r为数组元素总个数，last下标等于r-1</span>        <span class="token keyword">int</span> first<span class="token operator">=</span>l<span class="token punctuation">,</span>last<span class="token operator">=</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>key<span class="token operator">=</span>num<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>first<span class="token operator">&lt;</span>last<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>first<span class="token operator">&lt;</span>last<span class="token operator">&amp;&amp;</span>num<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token operator">&gt;=</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token operator">--</span>last<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//如果值小于 key分界值 交换</span>            num<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>first<span class="token operator">&lt;</span>last<span class="token operator">&amp;&amp;</span>num<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token operator">&lt;</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token operator">++</span>first<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//如果值大于key分界值 交换</span>            num<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        num<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token operator">=</span>key<span class="token punctuation">;</span>        <span class="token comment">//递归左右部分进行快排</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token operator">&gt;</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>             num<span class="token operator">=</span><span class="token function">quick_sort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> l<span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            num<span class="token operator">=</span><span class="token function">quick_sort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>first<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就是快速排序算法的介绍，如有问题，欢迎大家指正！</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/Blog/2022/03/21/hello-world/"/>
      <url>/Blog/2022/03/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
